diff --git a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
index 08cc3b5719df276d8fb27f59e6f28a26ee80890f..ac7b08ff8db96c2c6109d5f1b38dde742cef5a5d 100644
--- a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
+++ b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
@@ -195,6 +195,9 @@
 #include "ui/gfx/geometry/vector2d_f.h"
 #include "v8/include/v8-local-handle.h"
 
+#include "third_party/blink/renderer/core/offscreencanvas/offscreen_canvas.h"
+#include "third_party/blink/renderer/core/frame/local_dom_window.h"
+
 // Including "base/time/time.h" triggers a bug in IWYU.
 // https://github.com/include-what-you-use/include-what-you-use/issues/1122
 // IWYU pragma: no_include "base/numerics/clamped_math.h"
@@ -2912,6 +2915,9 @@ ImageData* BaseRenderingContext2D::getImageDataInternal(
           snapshot->PaintImageForCurrentFrame().GetSkImageInfo().bounds();
       DCHECK(!bounds.intersect(SkIRect::MakeXYWH(sx, sy, sw, sh)));
     }
+    if (read_pixels_successful && RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
+      blink::ShuffleSubchannelColorData(image_data_pixmap.addr(), image_data_pixmap.info(), sx, sy);
+    }
   }
 
   return image_data;
@@ -3592,6 +3598,22 @@ TextMetrics* BaseRenderingContext2D::measureText(const String& text) {
   const CanvasRenderingContext2DState& state = GetState();
   TextDirection direction = ToTextDirection(state.GetDirection(), canvas);
 
+  // Scale text metrics if enabled
+  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled()) {
+    TextMetrics* text_metrics = MakeGarbageCollected<TextMetrics>(font, direction,
+                                                 GetState().GetTextBaseline(),
+                                                 GetState().GetTextAlign(), text);
+    if (HostAsOffscreenCanvas()) {
+      if (auto* window = DynamicTo<LocalDOMWindow>(GetTopExecutionContext())) {
+        if (window->GetFrame() && window->GetFrame()->GetDocument())
+          text_metrics->Shuffle(window->GetFrame()->GetDocument()->GetNoiseFactorX());
+      }
+    } else if (canvas) {
+      text_metrics->Shuffle(canvas->GetDocument().GetNoiseFactorX());
+    }
+    return text_metrics;
+  }
+
   return MakeGarbageCollected<TextMetrics>(
       font, direction, state.GetTextBaseline(), state.GetTextAlign(), text);
 }
