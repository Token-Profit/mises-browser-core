diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
index 0533a68040c2ebbcfe6ee22b76cd4f78d50a09bc..0d1ea0cd98903892630340895ec849daf946d237 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -247,6 +247,41 @@ import org.chromium.webapk.lib.client.WebApkNavigationClient;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.chromium.base.ContextUtils;
+import org.chromium.base.ApiCompatibilityUtils;
+import org.chromium.chrome.browser.PersonalizeResults;
+import org.chromium.chrome.browser.FixDevToolsWindow;
+import org.chromium.chrome.browser.lifetime.ApplicationLifetime;
+import org.chromium.chrome.browser.browsing_data.ClearBrowsingDataTabsFragment;
+import org.chromium.chrome.browser.night_mode.WebContentsDarkModeController;
+import org.chromium.chrome.browser.preferences.ChromeSharedPreferences;
+import org.chromium.chrome.browser.night_mode.ThemeType;
+import org.chromium.components.content_settings.ContentSettingValues;
+import org.chromium.components.content_settings.ContentSettingsType;
+import org.chromium.components.browser_ui.site_settings.WebsitePreferenceBridge;
+import org.chromium.components.browser_ui.site_settings.WebsitePreferenceBridgeJni;
+import org.chromium.ui.widget.Toast;
+import android.content.ComponentName;
+import android.provider.Settings;
+import org.chromium.base.MisesSysUtils;
+import org.chromium.chrome.browser.mises.UIUtil;
+import org.chromium.base.MisesController;
+
+import android.view.Gravity;
+import android.app.role.RoleManager;
+import androidx.appcompat.content.res.AppCompatResources;
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import org.chromium.chrome.browser.AppMenuBridge;
+import org.chromium.chrome.browser.mises.MisesLCDServiceImpl;
+import org.chromium.components.browser_ui.widget.CoordinatorLayoutForPointer;
+import com.google.firebase.analytics.FirebaseAnalytics;
+import org.chromium.chrome.browser.firstrun.FirstRunFlowSequencer;
+import org.chromium.chrome.browser.firstrun.FirstRunStatus;
+import org.chromium.chrome.browser.preferences.MisesPrefServiceBridge;
+import org.chromium.chrome.browser.metrics.ChangeMetricsReportingStateCalledFrom;
+import org.chromium.chrome.browser.metrics.UmaSessionStats;
+
 /**
  * A {@link AsyncInitializationActivity} that builds and manages a {@link CompositorViewHolder} and
  * associated classes.
@@ -366,6 +401,8 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
     /** Listen to display change and start tab-reparenting if necessary. */
     private DisplayAndroidObserver mDisplayAndroidObserver;
 
+    private String mMenuTitleCondensed;
+
     /**
      * The RootUiCoordinator associated with the activity. This variable is held to facilitate
      * testing.
@@ -522,6 +559,8 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         // not go through ChromeLauncherActivity that would have normally triggered this.
         mPartnerBrowserRefreshNeeded = !PartnerBrowserCustomizations.getInstance().isInitialized();
 
+        WebContentsDarkModeController.updateDarkModeStringSettings();
+
         CommandLine commandLine = CommandLine.getInstance();
         if (!commandLine.hasSwitch(ChromeSwitches.DISABLE_FULLSCREEN)) {
             TypedValue threshold = new TypedValue();
@@ -917,12 +956,23 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                     @Override
                     public void onLoadStopped(Tab tab, boolean toDifferentDocument) {
                         postDeferredStartupIfNeeded();
+                        mRootUiCoordinator.getStatusBarColorController().updateStatusBarColor();
                     }
 
                     @Override
                     public void onPageLoadFinished(Tab tab, GURL url) {
                         postDeferredStartupIfNeeded();
                         OfflinePageUtils.showOfflineSnackbarIfNecessary(tab);
+                        mRootUiCoordinator.getStatusBarColorController().updateStatusBarColor();
+                    }
+
+                    @Override
+                    public void onUrlUpdated(Tab tab){
+	                     if (tab != null && !tab.isNativePage()) {
+	                        FixDevToolsWindow.Execute(tab);
+                            PersonalizeResults.Execute(tab.getUrl(), tab.getWebContents());
+	                     }
+                        mRootUiCoordinator.getStatusBarColorController().updateStatusBarColor();
                     }
 
                     @Override
@@ -1189,6 +1239,7 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         }
 
         getManualFillingComponent().onResume();
+        MisesLCDServiceImpl.maybeStartService(getApplication());
         checkForDeviceLockOnAutomotive();
     }
 
@@ -1839,6 +1890,22 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                     }
                 };
         display.addObserver(mDisplayAndroidObserver);
+
+
+        MisesController.getInstance().load();
+        SharedPreferencesManager prefs = ChromeSharedPreferences.getInstance();
+        if (prefs.isMisesFirstRun()) {
+            setDefaultBrowser();
+            prefs.setMisesFirstRun(false);
+            Profile profile = getCurrentTabModel().getProfile();
+            WebsitePreferenceBridge.setPopupSettingForOrigin(profile, MisesController.MISES_HOME_BASE_URL, 1, false);
+            PersonalizeResults.SetupDefaultUserAgent(profile);
+        }
+        if (!FirstRunStatus.getFirstRunFlowComplete()) {
+            UmaSessionStats.changeMetricsReportingConsent(
+                true, ChangeMetricsReportingStateCalledFrom.UI_FIRST_RUN);
+            FirstRunFlowSequencer.markFlowAsCompleted();
+        }
     }
 
     private void initializeManualFillingComponent(ProfileProvider profileProvider) {
@@ -1872,6 +1939,65 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         return mNativeInitialized;
     }
 
+    private static final String SETTINGS_SELECT_OPTION_KEY = ":settings:fragment_args_key";
+    private static final String SETTINGS_SHOW_FRAGMENT_ARGS = ":settings:show_fragment_args";
+    private static final String DEFAULT_BROWSER_APP_OPTION = "default_browser";
+    private final ActivityResultLauncher<Intent> resultLauncher =
+        registerForActivityResult(
+            new ActivityResultContracts.StartActivityForResult(),
+            result -> {
+                if (result.getResultCode() == Activity.RESULT_OK) {
+                    Toast.makeText(ChromeActivity.this, "Default Browser is set", Toast.LENGTH_LONG).show();
+                } else {
+                    Toast.makeText(ChromeActivity.this, "Default Browser is not set", Toast.LENGTH_LONG).show();
+                }
+            }
+        );        
+    private void setDefaultBrowser() {
+        UIUtil.showAlertDialog(ChromeActivity.this, ChromeActivity.this.getString(R.string.lbl_default_browser_tip), v1 -> {
+                doDefaultBrowser();
+        });
+    }
+    private void doDefaultBrowser() {
+        try {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {   
+                RoleManager roleManager = (RoleManager) getSystemService(ROLE_SERVICE);
+                Intent intent = roleManager.createRequestRoleIntent(RoleManager.ROLE_BROWSER);
+                resultLauncher.launch(intent);
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+                Intent intent = new Intent(Settings.ACTION_MANAGE_DEFAULT_APPS_SETTINGS);
+                intent.putExtra(
+                        SETTINGS_SELECT_OPTION_KEY,
+                        DEFAULT_BROWSER_APP_OPTION
+                );
+                Bundle bundle = new Bundle();
+                bundle.putString(SETTINGS_SELECT_OPTION_KEY, DEFAULT_BROWSER_APP_OPTION);
+                intent.putExtra(
+                        SETTINGS_SHOW_FRAGMENT_ARGS,
+                        bundle
+                );
+                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                startActivity(intent);
+            }
+
+        } catch (Exception e) {
+        }
+
+    }
+    @Override
+    public void setShowExtensionOnly() {
+      mRootUiCoordinator.getAppMenuCoordinatorForTesting().getAppMenuPropertiesDelegate().showExtensionOnly(true);
+    }
+    @Override
+    public void setLastItemTitle(String itemTitle) {
+	    Log.d("Mises", "setLastItemTitle:" + itemTitle);
+        mMenuTitleCondensed = itemTitle;
+    }
+
+    @Override
+    public void setLastVisibleItemTitle(String itemTitle) {
+    }
+
     @Override
     public boolean onOptionsItemSelected(int itemId, @Nullable Bundle menuItemData) {
         if (mManualFillingComponentSupplier.hasValue()) {
@@ -2480,10 +2606,38 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                 mMenuActionHandlers) {
             if (handler.handleMenuOrKeyboardAction(id, fromMenu)) return true;
         }
-
+        if (mMenuTitleCondensed != null) {
+        Log.d("Mises", "onMenuOrKeyboardAction:" + mMenuTitleCondensed);
+        }
+        else {
+        Log.d("Mises", "onMenuOrKeyboardAction");
+        }
         @BrowserProfileType
         int type = Profile.getBrowserProfileTypeFromProfile(getCurrentTabModel().getProfile());
 
+        if (mMenuTitleCondensed != null && !mMenuTitleCondensed.equals("") && mMenuTitleCondensed.contains("Extension: ")) {
+            String[] extensionInfo = mMenuTitleCondensed.split(": ");
+            String extensionId = extensionInfo[1];
+            String extensionUrl = "";
+            if (extensionInfo.length > 2)
+                extensionUrl = extensionInfo[2];
+            Log.d("Mises", "Pressed extension menu: " + extensionId + " - url: " + extensionUrl);
+            Bundle bundleParams = new Bundle();
+            bundleParams.putString("id", extensionId);
+            bundleParams.putString("from", "menu");
+            FirebaseAnalytics.getInstance(this).logEvent("open_extension", bundleParams);
+            Tab tab = getActivityTab();
+            if (tab != null && tab.getWebContents() != null) {
+                WebContents webContents = tab.getWebContents();
+		        Profile profile = Profile.fromWebContents(webContents).getOriginalProfile();
+                LaunchMetrics.commitLaunchMetrics(webContents);
+                AppMenuBridge.getForProfile(profile).grantExtensionActiveTab(webContents, extensionId);
+                AppMenuBridge.getForProfile(profile).callExtension(webContents, extensionId);
+                return true;
+            }
+            return false;
+        }
+
         if (id == R.id.preferences_id) {
             SettingsLauncher settingsLauncher = SettingsLauncherFactory.createSettingsLauncher();
             settingsLauncher.launchSettingsActivity(this);
@@ -2611,9 +2765,113 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
 
         if (id == R.id.translate_id) {
             RecordUserAction.record("MobileMenuTranslate");
+            if (ContextUtils.getAppSharedPreferences().getString("active_translator", "").equals("")
+           || ContextUtils.getAppSharedPreferences().getString("active_translator", "").equals("Default")) {
             Tracker tracker = TrackerFactory.getTrackerForProfile(currentTab.getProfile());
             tracker.notifyEvent(EventConstants.TRANSLATE_MENU_BUTTON_CLICKED);
             TranslateBridge.translateTabWhenReady(currentTab);
+            } else {
+            String url = currentTab.getUrl().getSpec();
+            if (currentTab != null && !url.isEmpty()) {
+                boolean hasTranslated = false;
+
+              if (ContextUtils.getAppSharedPreferences().getString("active_translator", "").equals("Google")) {
+                hasTranslated = false;
+                try {
+                   if (url != null
+                     &&
+                      (
+                            url.startsWith("https://translate.google.com/")
+                        ||  url.startsWith("https://translate.googleusercontent.com/")
+                        ||  url.startsWith("http://translate.google.com/")
+                        ||  url.startsWith("http://translate.googleusercontent.com/")
+                        ||  url.contains(".translate.goog/")
+                     )
+                    ) {
+                       Uri uri = Uri.parse(url);
+                       String paramValue = uri.getQueryParameter("u");
+                       LoadUrlParams loadUrlParams = new LoadUrlParams(paramValue);
+                       currentTab.loadUrl(loadUrlParams);
+                       hasTranslated = true;
+                   }
+                } catch (Exception e) {
+                }
+                if (!hasTranslated) {
+                    LoadUrlParams loadUrlParams = new LoadUrlParams("http://translate.google.com/translate?sl=auto&tl=auto&u=" + Uri.encode(url));
+                    currentTab.loadUrl(loadUrlParams);
+                }
+              } else if (ContextUtils.getAppSharedPreferences().getString("active_translator", "").equals("Yandex")) {
+                hasTranslated = false;
+                try {
+                   if (url != null
+                     &&
+                      (
+                            url.startsWith("https://translate.yandex.com/")
+                        ||  url.startsWith("http://translate.yandex.com/")
+                     )
+                    ) {
+                       Uri uri = Uri.parse(url);
+                       String paramValue = uri.getQueryParameter("u");
+                       LoadUrlParams loadUrlParams = new LoadUrlParams(paramValue);
+                       currentTab.loadUrl(loadUrlParams);
+                       hasTranslated = true;
+                   }
+                } catch (Exception e) {
+                }
+                if (!hasTranslated) {
+                    LoadUrlParams loadUrlParams = new LoadUrlParams("https://translate.yandex.com/?text=" + Uri.encode(url));
+                    currentTab.loadUrl(loadUrlParams);
+                }
+              } else if (ContextUtils.getAppSharedPreferences().getString("active_translator", "").equals("Baidu")) {
+                hasTranslated = false;
+                try {
+                   if (url != null
+                     &&
+                      (
+                            url.startsWith("https://fanyi.baidu.com/")
+                        ||  url.startsWith("http://fanyi.baidu.com/")
+                     )
+                    ) {
+                       Uri uri = Uri.parse(url);
+                       String paramValue = uri.getQueryParameter("query");
+                       LoadUrlParams loadUrlParams = new LoadUrlParams(paramValue);
+                       currentTab.loadUrl(loadUrlParams);
+                       hasTranslated = true;
+                   }
+                } catch (Exception e) {
+                }
+                if (!hasTranslated) {
+                    LoadUrlParams loadUrlParams = new LoadUrlParams("http://fanyi.baidu.com/transpage?source=url&ie=utf8&from=auto&to=zh&render=1&query=" + Uri.encode(url));
+                    currentTab.loadUrl(loadUrlParams);
+                }
+              } else {
+                try {
+                   if (url != null
+                     &&
+                      (
+                          url.contains("www.microsofttranslator.com/bv.aspx")
+                       || url.contains("translatetheweb.com")
+                       || url.contains("translatetheweb.net")
+                       || url.contains("translatetheweb-int.net")
+                       || url.contains("translatoruser.com")
+                       || url.contains("translatoruser.net")
+                     )
+                    ) {
+                       Uri uri = Uri.parse(url);
+                       String paramValue = uri.getQueryParameter("a");
+                       LoadUrlParams loadUrlParams = new LoadUrlParams(paramValue);
+                       currentTab.loadUrl(loadUrlParams);
+                       hasTranslated = true;
+                   }
+                } catch (Exception e) {
+                }
+                if (!hasTranslated) {
+                    LoadUrlParams loadUrlParams = new LoadUrlParams("http://www.microsofttranslator.com/bv.aspx?r=true&a=" + Uri.encode(url));
+                    currentTab.loadUrl(loadUrlParams);
+                }
+             }
+            }
+            }
             return true;
         }
 
@@ -2658,6 +2916,43 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
             return true;
         }
 
+        if (id == R.id.adblock_id || id == R.id.adblock_check_id) {
+            boolean adBlockIsActive = (WebsitePreferenceBridgeJni.get().isContentSettingEnabled(ProfileManager.getLastUsedRegularProfile(), ContentSettingsType.ADS) == false);
+            if (!adBlockIsActive) {
+              WebsitePreferenceBridgeJni.get().setContentSettingEnabled(ProfileManager.getLastUsedRegularProfile(), ContentSettingsType.ADS, false); // BLOCK
+            } else {
+	      final String origin = currentTab.getUrl().getOrigin().getSpec();
+              int adblockSettingForThisSite = WebsitePreferenceBridgeJni.get().getPermissionSettingForOrigin(ProfileManager.getLastUsedRegularProfile(), ContentSettingsType.ADS, origin, origin);
+              Log.i("Mises", "Adblock switch for " + origin + " " + String.valueOf(adblockSettingForThisSite));
+	      if (adblockSettingForThisSite == ContentSettingValues.DEFAULT || adblockSettingForThisSite == ContentSettingValues.BLOCK)
+                WebsitePreferenceBridgeJni.get().setPermissionSettingForOrigin(ProfileManager.getLastUsedRegularProfile(), ContentSettingsType.ADS, origin, origin, ContentSettingValues.ALLOW);
+              else
+                WebsitePreferenceBridgeJni.get().setPermissionSettingForOrigin(ProfileManager.getLastUsedRegularProfile(), ContentSettingsType.ADS, origin, origin, ContentSettingValues.DEFAULT);
+            }
+            currentTab.stopLoading();
+            currentTab.reload();
+            RecordUserAction.record("MobileMenuSwitchAdblock");
+	    return true;
+        }
+
+        if (id == R.id.developer_tools_id) {
+            WebContents webContents = currentTab.getWebContents();
+            if (webContents != null) {
+                Profile profile = Profile.fromWebContents(webContents).getOriginalProfile();
+                AppMenuBridge.getForProfile(profile).openDevTools(webContents);
+            }
+	        return true;
+        }
+
+        if (id == R.id.disable_proxy_id) {
+            WebContents webContents = currentTab.getWebContents();
+            if (webContents != null) {
+                Profile profile = Profile.fromWebContents(webContents).getOriginalProfile();
+                AppMenuBridge.getForProfile(profile).disableProxy();
+            }
+	        return true;
+        }
+
         if (id == R.id.auto_dark_web_contents_id || id == R.id.auto_dark_web_contents_check_id) {
             // Get values needed to check/enable auto dark for the current site.
             Profile profile = getCurrentTabModel().getProfile();
@@ -2691,6 +2986,57 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
             return true;
         }
 
+        if (id == R.id.night_mode_switcher_id) {
+            Log.d("Mises", "Initializing night mode with mode: " + ContextUtils.getAppSharedPreferences().getString("active_nightmode", "default"));
+            WebContentsDarkModeController.updateDarkModeStringSettings();
+            boolean isDarkModeEnabled = ContextUtils.getAppSharedPreferences().getBoolean("darken_websites_enabled", false);
+            SharedPreferencesManager prefs = ChromeSharedPreferences.getInstance();
+            if (!isDarkModeEnabled) {
+              getWindow().setBackgroundDrawable(new ColorDrawable(
+                          getColor(R.color.media_viewer_bg)));
+              int currentTheme = ContextUtils.getAppSharedPreferences().getInt("ui_theme_setting", 0);
+              prefs.writeIntUnchecked("previous_ui_theme_setting", currentTheme);
+              prefs.writeInt("ui_theme_setting", ThemeType.DARK);
+            } else {
+              getWindow().setBackgroundDrawable(new ColorDrawable(
+                          getColor(R.color.resizing_background_color)));
+              int previousTheme = ContextUtils.getAppSharedPreferences().getInt("previous_ui_theme_setting", 0);
+              prefs.writeInt("ui_theme_setting", previousTheme);
+            }
+            prefs.writeBooleanSync("darken_websites_enabled", !isDarkModeEnabled);
+            MisesPrefServiceBridge.getInstance().setDarkModeEnabled(!isDarkModeEnabled);
+
+            WebsitePreferenceBridge.setContentSettingEnabled(
+                    ProfileManager.getLastUsedRegularProfile(), ContentSettingsType.AUTO_DARK_WEB_CONTENT, !isDarkModeEnabled);
+            currentTab.getWebContents().notifyRendererPreferenceUpdate();
+        }
+
+        if (id == R.id.extensions_id) {
+            RecordUserAction.record("MobileMenuExtensions");
+            TabCreator tabCreator = getTabCreator(false);
+            if (currentTab != null && tabCreator != null) {
+              tabCreator.openSinglePage(MisesController.EXTENSIONS_BASE_URL);
+            }
+        }
+        if (id == R.id.mises_wallet_id) {
+            RecordUserAction.record("MobileMenuMisesWallet");
+            TabCreator tabCreator = getTabCreator(false);
+            if (currentTab != null && tabCreator != null) {
+              tabCreator.openSinglePage(MisesController.MISES_WALLET_BASE_URL);
+            }
+        }
+
+        if (id == R.id.set_default_browser) {
+            RecordUserAction.record("SetDefaultBrowserFromMainMenu");
+            setDefaultBrowser();
+        }
+
+        if (id == R.id.exit_id) {
+            RecordUserAction.record("MobileMenuExit");
+            getTabModelSelector().closeAllTabs();
+            ApplicationLifetime.terminate(false);
+        }
+
         return false;
     }
 
