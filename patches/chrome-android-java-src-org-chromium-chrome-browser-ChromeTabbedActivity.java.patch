diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
index 62e385ccf7cdf3b06c40899ed6d8ca30a2fae838..8f3b4ae6e4e631a5ecfe37c12be87ef84bd6d57b 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
@@ -273,12 +273,28 @@ import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.DoubleConsumer;
 
+import android.net.Uri;
+import android.content.Context;
+import android.animation.ValueAnimator;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.chromium.base.ContextUtils;
+import org.chromium.components.url_formatter.UrlFormatter;
+import org.chromium.chrome.browser.init.ChromeBrowserReferrer;
+import org.chromium.chrome.browser.init.InAppUpdater;
+import org.chromium.chrome.browser.homepage.HomepageManager;
+import org.chromium.base.MisesController;
+import org.chromium.chrome.browser.mises.MisesShareWin;
+import org.chromium.chrome.browser.mises.UIUtil;
+import org.chromium.chrome.browser.feed.FeedFeatures;
+import org.chromium.base.MisesSysUtils;
+import org.chromium.chrome.browser.app.MisesActivity;
+
 /**
  * This is the main activity for ChromeMobile when not running in document mode. All the tabs are
  * accessible via a chrome specific tab switching UI.
  */
-public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent>
-        implements MismatchedIndicesHandler {
+public class ChromeTabbedActivity extends MisesActivity {
     private static final String TAG = "ChromeTabbedActivity";
 
     protected static final String WINDOW_INDEX = "window_index";
@@ -292,7 +308,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs
     // restore. This is needed because we do not know when reading PartnerBrowserCustomizations
     // provider will be finished.
-    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;
+    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 1;
 
     /**
      * Sending an intent with this action to Chrome will cause it to close all tabs
@@ -449,6 +465,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     private OneshotSupplierImpl<ModuleRegistry> mModuleRegistrySupplier =
             new OneshotSupplierImpl<>();
 
+    private InAppUpdater mInAppUpdater = new InAppUpdater();
+
     private CookiesFetcher mIncognitoCookiesFetcher;
     private final IncognitoTabHost mIncognitoTabHost =
             new IncognitoTabHost() {
@@ -1039,6 +1057,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                         this, mLayoutManager, mTabModelSelector, getLifecycleDispatcher());
             }
 
+
             mUIWithNativeInitialized = true;
 
             // The dataset has already been created, we need to initialize our state.
@@ -1115,6 +1134,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                 // TODO(crbug.com/40853081): Enable split compositor task on tablets.
                 initializeCompositorContent();
             }
+            ChromeBrowserReferrer.handleInstallReferrer(this);
+            mInAppUpdater.startCheck(this);
 
             // All this initialization can be expensive so it's split into multiple tasks.
             PostTask.postTask(
@@ -1169,6 +1190,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             }
 
             mInactivityTracker.setLastVisibleTimeMsAndRecord(System.currentTimeMillis());
+            MisesSysUtils.init(this);
 
             getSnackbarManager().setEdgeToEdgeSupplier(getEdgeToEdgeSupplier().get());
         }
@@ -1334,6 +1356,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             // Launch history on an already running instance of Chrome.
             maybeLaunchHistory();
         }
+
+        mInAppUpdater.onResume(this);
     }
 
     @Override
@@ -1534,6 +1558,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
 
             boolean noRestoreState =
                     CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);
+            noRestoreState = noRestoreState || ContextUtils.getAppSharedPreferences().getBoolean("close_tabs_on_exit", false);
             boolean shouldShowNtpAsHomeSurfaceAtStartup = false;
             final AtomicBoolean isActiveUrlNtp = new AtomicBoolean(false);
             if (noRestoreState) {
@@ -1672,7 +1697,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             if (!mPendingInitialTabCreation) {
                 Tab currentTab = getActivityTab();
                 boolean isTabNtp = isTabRegularNtp(currentTab);
-                if (isTabNtp && !currentTab.isNativePage()) {
+                boolean isTabNativeUrl = currentTab != null && currentTab.getUrl().getScheme().equals(UrlConstants.CHROME_NATIVE_SCHEME);
+                if (isTabNativeUrl && isTabNtp && !currentTab.isNativePage()) {
                     // This will be a NTP, but the native page hasn't been created yet. Need to wait
                     // for this to be created before allowing the toolbar to draw.
                     currentTab.addObserver(
@@ -2877,6 +2903,18 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             TabModel currentModel = mTabModelSelector.getCurrentModel();
             if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedEntry();
             RecordUserAction.record("MobileTabClosedUndoShortCut");
+        } else if (id == R.id.mises_forward_menu_id) {
+            handleForward(currentTab);
+        } else if (id == R.id.new_home_tab_menu_id) {
+            getTabModelSelector().getModel(false).commitAllTabClosures();
+            RecordUserAction.record("MobileMenuNewHomeTab");
+            RecordUserAction.record("MobileNewHomeTabOpened");
+            reportNewTabShortcutUsed(false);
+            if (fromMenu) RecordUserAction.record("MobileMenuNewHomeTab.AppMenu");
+
+            getTabCreator(false).launchUrl(HomepageManager.getInstance().getHomepageGurlIgnoringEnabledState().getSpec(), TabLaunchType.FROM_CHROME_UI);
+
+            mLocaleManager.showSearchEnginePromoIfNeeded(this, null);
         } else if (id == R.id.quick_delete_menu_id
                 && QuickDeleteController.isQuickDeleteEnabled()) {
             assert !mTabModelSelector.getCurrentModel().isIncognito()
@@ -3562,6 +3600,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         try (TraceEvent e = TraceEvent.scoped("ChromeTabbedActivity.onActivityResult")) {
             super.onActivityResult(requestCode, resultCode, data);
+            mInAppUpdater.onActivityResult(requestCode, resultCode, data);
         }
     }
 
@@ -3746,4 +3785,48 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                                     mLayoutManager, /* animate= */ false, showJoinFlowRunnable);
                         }));
     }
+
+    private void handleForward(final Tab currentTab) {
+        String SCRIPT = "if(window.misesModule && window.misesModule.getWindowInformation){window.misesModule.getWindowInformation()} else {console.log('window.misesModule or window.misesModule.getWindowInformation is null')}";
+        final Context context = ChromeTabbedActivity.this;
+        if (currentTab == null || currentTab.getWebContents() == null)
+            return;
+        if (currentTab.isNativePage() || currentTab.isClosing()
+                || currentTab.isShowingErrorPage() ) {
+            Log.e("mises","share currentTab.isNativePage() || currentTab.isClosing() || currentTab.isShowingErrorPage() || currentTab.isShowingSadTab()");
+            Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+            return;
+        }
+        currentTab.getWebContents().evaluateJavaScript(SCRIPT, jsonResult -> {
+            Log.e("mises share msg : ", jsonResult);
+            if (jsonResult != null && !jsonResult.isEmpty()) {
+                try {
+                    JSONObject ob = new JSONObject(jsonResult);
+                    String icon = "";
+                    if (ob.has("icon"))
+                        icon = ob.getString("icon");
+                    String title = ob.getString("title");
+                    String url = ob.getString("url");
+                    if (MisesController.getInstance().getMisesToken().isEmpty()) {
+                        UIUtil.showAlertDialog(context, context.getString(R.string.lbl_login_tip), v1 -> {
+                            ChromeTabCreator tabCreator = ChromeTabbedActivity.this.getTabCreator(false);
+                            if (tabCreator != null) {
+                                tabCreator.openSinglePage(MisesController.MISES_HOME_BASE_URL + "/home/me");
+                            }
+                        });
+                        return;
+                    }
+                    MisesShareWin shareWin = MisesShareWin.newInstance(ChromeTabbedActivity.this, icon, title, url);
+                    shareWin.show((ChromeTabbedActivity.this).getSupportFragmentManager(), "MisesShareWin");
+                } catch (JSONException e) {
+                    Log.e("mises", "share is not json" + e.toString());
+                    Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                    e.printStackTrace();
+                }
+            } else {
+                Log.e("mises", "share json is null");
+                Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
 }
