diff --git a/chrome/browser/extensions/api/tabs/tabs_api.cc b/chrome/browser/extensions/api/tabs/tabs_api.cc
index aa6acb2e58acccbe9d64d3dbff4e0b22abb7d78e..dbd982f8c937f41fdf5dc5ffdc997e857c6b6e9e 100644
--- a/chrome/browser/extensions/api/tabs/tabs_api.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_api.cc
@@ -144,7 +144,9 @@ using content::NavigationEntry;
 using content::OpenURLParams;
 using content::Referrer;
 using content::WebContents;
+#if !BUILDFLAG(IS_ANDROID)
 using tabs::TabModel;
+#endif
 using zoom::ZoomController;
 
 namespace extensions {
@@ -301,6 +303,7 @@ api::tabs::Tab CreateTabObjectHelper(WebContents* contents,
 // new index of the tab in the target tabstrip. On failure, returns -1.
 // Assumes that the caller has already checked whether the target window is
 // different from the source.
+#if !BUILDFLAG(IS_ANDROID)
 int MoveTabToWindow(ExtensionFunction* function,
                     int tab_id,
                     Browser* target_browser,
@@ -369,6 +372,7 @@ int MoveTabToWindow(ExtensionFunction* function,
   return target_tab_strip->InsertDetachedTabAt(
       target_index, std::move(detached_tab), AddTabTypes::ADD_NONE);
 }
+#endif
 
 // This function sets the state of the browser window to a "locked"
 // fullscreen state (where the user can't exit fullscreen) in response to a
@@ -405,6 +409,7 @@ void SetLockedFullscreenState(Browser* browser, bool pinned) {
 #endif  // BUILDFLAG(IS_CHROMEOS)
 }
 
+#if !BUILDFLAG(IS_ANDROID)
 // Returns whether the given `bounds` intersect with at least 50% of all the
 // displays.
 bool WindowBoundsIntersectDisplays(const gfx::Rect& bounds) {
@@ -416,6 +421,7 @@ bool WindowBoundsIntersectDisplays(const gfx::Rect& bounds) {
   }
   return intersect_area >= (bounds.size().GetArea() / 2);
 }
+#endif
 
 void NotifyExtensionTelemetry(Profile* profile,
                               const Extension* extension,
@@ -427,7 +433,7 @@ void NotifyExtensionTelemetry(Profile* profile,
   if (!extension) {
     return;
   }
-
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* extension_telemetry_service =
       safe_browsing::ExtensionTelemetryService::Get(profile);
 
@@ -447,6 +453,7 @@ void NotifyExtensionTelemetry(Profile* profile,
       extension->id(), api_method, current_url, new_url,
       js_callstack.value_or(StackTrace()));
   extension_telemetry_service->AddSignal(std::move(tabs_api_signal));
+#endif
 }
 
 }  // namespace
@@ -541,13 +548,22 @@ ExtensionFunction::ResponseAction WindowsGetLastFocusedFunction::Run() {
       break;
     }
   }
+#if !BUILDFLAG(IS_ANDROID)
   if (!last_focused_browser) {
     return RespondNow(Error(tabs_constants::kNoLastFocusedWindowError));
   }
+#endif
 
   WindowController::PopulateTabBehavior populate_tab_behavior =
       extractor.populate_tabs() ? WindowController::kPopulateTabs
                                 : WindowController::kDontPopulateTabs;
+#if BUILDFLAG(IS_ANDROID)  
+  if (!last_focused_browser) {
+    base::Value::Dict windows = 
+       CreateDummyWindowValueForExtension(populate_tab_behavior);
+    return RespondNow(WithArguments(std::move(windows)));
+  }
+#endif
   base::Value::Dict windows = ExtensionTabUtil::CreateWindowValueForExtension(
       *last_focused_browser, extension(), populate_tab_behavior,
       source_context_type());
@@ -663,6 +679,10 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
                     &source_tab_strip, &web_contents, &tab_index, &error)) {
       return RespondNow(Error(std::move(error)));
     }
+    if (!source_browser) {
+      return RespondNow(
+          Error(tabs_constants::kCanOnlyMoveTabsWithinNormalWindowsError));
+    }
 
     if (web_app::AppBrowserController* controller =
             source_browser->app_controller();
@@ -671,12 +691,14 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
           Error(tabs_constants::kWindowCreateCannotMoveIwaTabError));
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     if (!ExtensionTabUtil::IsTabStripEditable())
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
 
     if (source_browser->profile() != window_profile)
       return RespondNow(
           Error(tabs_constants::kCanOnlyMoveTabsWithinSameProfileError));
+#endif
 
     if (DevToolsWindow::IsDevToolsWindow(web_contents))
       return RespondNow(Error(tabs_constants::kNotAllowedForDevToolsError));
@@ -746,11 +768,13 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       window_bounds.AdjustToFit(display.bounds());
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     // Immediately fail if the window bounds don't intersect the displays.
     if ((set_window_position || set_window_size) &&
         !WindowBoundsIntersectDisplays(window_bounds)) {
       return RespondNow(Error(tabs_constants::kInvalidWindowBoundsError));
     }
+#endif
 
     if (create_data->focused)
       focused = *create_data->focused;
@@ -825,10 +849,20 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       navigate_params.source_site_instance =
           render_frame_host()->GetSiteInstance();
     }
-
+#if BUILDFLAG(IS_ANDROID)
+    if (TabModelList::models().size() == 0) {
+        return RespondNow(
+            Error("no tab model."));
+    }
+    TabModel* tab_model = *(TabModelList::models().begin());
+    WebContents* web_contents = tab_model->CreateNewTabForExtension(extension_id, url, new_window->session_id().id());
+    navigate_params.navigated_or_inserted_contents = web_contents;
+#else
     Navigate(&navigate_params);
+#endif
   }
 
+#if !BUILDFLAG(IS_ANDROID)
   const TabModel* tab = nullptr;
   // Move the tab into the created window only if it's an empty popup or it's
   // a tabbed window.
@@ -855,6 +889,7 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       new_window, 0,
       TabStripUserGestureDetails(
           TabStripUserGestureDetails::GestureType::kNone));
+#endif
 
   if (focused) {
     new_window->window()->Show();
@@ -921,6 +956,7 @@ ExtensionFunction::ResponseAction WindowsUpdateFunction::Run() {
 
   WindowController* window_controller = nullptr;
   std::string error;
+#if !BUILDFLAG(IS_ANDROID)
   if (!windows_util::GetControllerFromWindowID(
           this, params->window_id, WindowController::GetAllWindowFilter(),
           &window_controller, &error)) {
@@ -1048,7 +1084,13 @@ ExtensionFunction::ResponseAction WindowsUpdateFunction::Run() {
 
   if (params->update_info.draw_attention)
     browser->window()->FlashFrame(*params->update_info.draw_attention);
-
+#else
+  if (!windows_util::GetControllerFromWindowID(
+          this, params->window_id, WindowController::kNoWindowFilter,
+          &window_controller, &error)) {
+    return RespondNow(Error(std::move(error)));
+  }
+#endif
   return RespondNow(
       WithArguments(window_controller->CreateWindowValueForExtension(
           extension(), WindowController::kDontPopulateTabs,
@@ -1081,6 +1123,12 @@ ExtensionFunction::ResponseAction WindowsRemoveFunction::Run() {
                                 ? tabs_constants::kTabStripNotEditableError
                                 : kUnknownErrorDoNotUse));
   }
+#if BUILDFLAG(IS_ANDROID)
+  CloseAllExtensionTabsAndroid(extension());
+  if (BrowserList::GetInstance()->size() == 1) {
+    return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
+  }
+#endif
   window_controller->window()->Close();
   return RespondNow(NoArguments());
 }
@@ -1088,12 +1136,15 @@ ExtensionFunction::ResponseAction WindowsRemoveFunction::Run() {
 // Tabs ------------------------------------------------------------------------
 
 ExtensionFunction::ResponseAction TabsGetSelectedFunction::Run() {
+#if !BUILDFLAG(IS_ANDROID)
   // windowId defaults to "current" window.
   int window_id = extension_misc::kCurrentWindowId;
+#endif
 
   std::optional<tabs::GetSelected::Params> params =
       tabs::GetSelected::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(params);
+#if !BUILDFLAG(IS_ANDROID)
   if (params->window_id)
     window_id = *params->window_id;
 
@@ -1115,12 +1166,23 @@ ExtensionFunction::ResponseAction TabsGetSelectedFunction::Run() {
   return RespondNow(ArgumentList(tabs::Get::Results::Create(
       CreateTabObjectHelper(contents, extension(), source_context_type(),
                             tab_strip, tab_strip->active_index()))));
+#else
+  WebContents* contents = nullptr;
+  int active_index = GetSelectedTabIndexAndroid(&contents);
+  if (active_index != -1 && contents) {
+     return RespondNow(ArgumentList(
+          tabs::Get::Results::Create(CreateTabObjectHelper(
+              contents, extension(), source_context_type(), nullptr, active_index))));
+  }
+  return RespondNow(Error(tabs_constants::kNoSelectedTabError));
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsGetAllInWindowFunction::Run() {
   std::optional<tabs::GetAllInWindow::Params> params =
       tabs::GetAllInWindow::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(params);
+#if !BUILDFLAG(IS_ANDROID)
   // windowId defaults to "current" window.
   int window_id = extension_misc::kCurrentWindowId;
   if (params->window_id)
@@ -1136,6 +1198,11 @@ ExtensionFunction::ResponseAction TabsGetAllInWindowFunction::Run() {
 
   return RespondNow(WithArguments(
       window_controller->CreateTabList(extension(), source_context_type())));
+#else
+  base::Value::List result;
+  GetTabListValueAndroid(result, extension(), source_context_type());
+  return RespondNow(WithArguments(std::move(result)));
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
@@ -1164,9 +1231,11 @@ ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
 
   std::string title = params->query_info.title.value_or(std::string());
 
+#if !BUILDFLAG(IS_ANDROID)
   int window_id = extension_misc::kUnknownWindowId;
   if (params->query_info.window_id)
     window_id = *params->query_info.window_id;
+#endif
 
   std::optional<int> group_id = std::nullopt;
   if (params->query_info.group_id)
@@ -1182,6 +1251,7 @@ ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
   }
 
   base::Value::List result;
+#if !BUILDFLAG(IS_ANDROID)
   Profile* profile = Profile::FromBrowserContext(browser_context());
   Browser* last_active_browser =
       chrome::FindAnyBrowser(profile, include_incognito_information());
@@ -1298,6 +1368,41 @@ ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
                        web_contents->IsAudioMuted())) {
         continue;
       }
+#else
+TabStripModel* tab_strip = nullptr;
+TabModel *tab_strip_android = nullptr;
+  if (!TabModelList::models().empty())
+    tab_strip_android = *(TabModelList::models().begin());
+  if (tab_strip_android) {
+    for (int i = 0; i < tab_strip_android->GetTabCount(); ++i) {
+      WebContents* web_contents = tab_strip_android->GetWebContentsAt(i);
+      if (index > -1 && i != index) {
+         continue;
+      }
+
+      int openingTab = tab_strip_android->GetLastNonExtensionActiveIndex();
+      if (!params->query_info.last_focused_window) {
+        openingTab = tab_strip_android->GetActiveIndex();
+      }
+      if (openingTab == -1)
+        openingTab = 0;
+
+      if (!MatchesBool(params->query_info.active, i == openingTab)) {
+         continue;
+      }
+      
+      if (!web_contents) {
+        continue;
+      }
+      api::tabs::WindowType android_window_type = api::tabs::WindowType::kNormal;
+      TabAndroid *tab_android = tab_strip_android->GetTabAt(i);
+      if(tab_android && tab_android->ExtensionWindowID() > 0) {
+        android_window_type = api::tabs::WindowType::kPopup;
+      }
+      if (!window_type.empty() && window_type != tabs::ToString(android_window_type)) {
+        continue;
+      }
+#endif
 
       if (!title.empty() || !url_patterns.is_empty()) {
         // "title" and "url" properties are considered privileged data and can
@@ -1457,6 +1562,7 @@ ExtensionFunction::ResponseAction TabsHighlightFunction::Run() {
       tabs::Highlight::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(params);
 
+#if !BUILDFLAG(IS_ANDROID)
   // Get the window id from the params; default to current window if omitted.
   int window_id = params->highlight_info.window_id.value_or(
       extension_misc::kCurrentWindowId);
@@ -1501,6 +1607,12 @@ ExtensionFunction::ResponseAction TabsHighlightFunction::Run() {
 
   selection.set_active(active_index);
   tab_strip_model->SetSelectionFromModel(std::move(selection));
+#else
+  WindowController* window_controller =
+        ChromeExtensionFunctionDetails(this).GetCurrentWindowController();
+  if (!window_controller || !HighlightTabAndroid(params->highlight_info))
+    return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
+#endif
   return RespondNow(
       WithArguments(window_controller->CreateWindowValueForExtension(
           extension(), WindowController::kPopulateTabs,
@@ -1537,6 +1649,7 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
   int tab_id = -1;
   WebContents* contents = nullptr;
   if (!params->tab_id) {
+#if !BUILDFLAG(IS_ANDROID)
     WindowController* window_controller =
         ChromeExtensionFunctionDetails(this).GetCurrentWindowController();
     if (!window_controller) {
@@ -1546,6 +1659,9 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
     }
     contents = window_controller->GetActiveTab();
+#else
+    contents = GetActiveWebContentsAndroid();
+#endif
     if (!contents) {
       return RespondNow(Error(tabs_constants::kNoSelectedTabError));
     }
@@ -1555,9 +1671,10 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
   }
 
   int tab_index = -1;
-  TabStripModel* tab_strip = nullptr;
   Browser* browser = nullptr;
   std::string error;
+#if !BUILDFLAG(IS_ANDROID)
+  TabStripModel* tab_strip = nullptr;
   if (!GetTabById(tab_id, browser_context(), include_incognito_information(),
                   &browser, &tab_strip, &contents, &tab_index, &error)) {
     return RespondNow(Error(std::move(error)));
@@ -1571,6 +1688,17 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
     return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
   }
 
+#else
+  TabModel *tab_strip_android = nullptr;
+  if (!TabModelList::models().empty())
+    tab_strip_android = *(TabModelList::models().begin());
+  if (!tab_strip_android)
+    return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
+  if (!GetTabById(tab_id, browser_context(), include_incognito_information(),
+                  &browser, nullptr, &contents, &tab_index, &error)) {
+    return RespondNow(Error(error));
+  }
+#endif
   web_contents_ = contents;
 
   bool active = false;
@@ -1592,10 +1720,16 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     if (tab_strip->active_index() != tab_index) {
       tab_strip->ActivateTabAt(tab_index);
       DCHECK_EQ(contents, tab_strip->GetActiveWebContents());
     }
+#else
+    if (tab_strip_android->GetActiveIndex() != tab_index) {
+      tab_strip_android->SetActiveIndex(tab_index);
+    } 
+#endif
   }
 
   if (params->update_properties.highlighted) {
@@ -1605,10 +1739,12 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     bool highlighted = *params->update_properties.highlighted;
     if (highlighted != tab_strip->IsTabSelected(tab_index)) {
       tab_strip->ToggleSelectionAt(tab_index);
     }
+#endif
   }
 
   if (params->update_properties.muted &&
@@ -1619,6 +1755,7 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
         base::NumberToString(tab_id))));
   }
 
+#if !BUILDFLAG(IS_ANDROID)
   if (params->update_properties.opener_tab_id) {
     int opener_id = *params->update_properties.opener_tab_id;
     WebContents* opener_contents = nullptr;
@@ -1652,6 +1789,7 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
         web_contents_)
         ->SetAutoDiscardable(state);
   }
+#endif
 
   if (params->update_properties.pinned) {
     // Bug fix for crbug.com/1197888. Don't let the extension update the tab if
@@ -1660,11 +1798,13 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     bool pinned = *params->update_properties.pinned;
     tab_strip->SetTabPinned(tab_index, pinned);
 
     // Update the tab index because it may move when being pinned.
     tab_index = tab_strip->GetIndexOfWebContents(contents);
+#endif
   }
 
   // TODO(rafaelw): handle setting remaining tab properties:
@@ -1674,11 +1814,13 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
   // Navigate the tab to a new location if the url is different.
   if (params->update_properties.url) {
     std::string updated_url = *params->update_properties.url;
+#if !BUILDFLAG(IS_ANDROID)
     if (browser->profile()->IsIncognitoProfile() &&
         !IsURLAllowedInIncognito(GURL(updated_url), browser->profile())) {
       return RespondNow(Error(ErrorUtils::FormatErrorMessage(
           tabs_constants::kURLsNotAllowedInIncognitoError, updated_url)));
     }
+#endif
 
     // Get last committed or pending URL.
     std::string current_url = contents->GetVisibleURL().is_valid()
@@ -1809,6 +1951,10 @@ bool TabsMoveFunction::MoveTab(int tab_id,
     *error = tabs_constants::kTabStripNotEditableError;
     return false;
   }
+#if BUILDFLAG(IS_ANDROID)
+    *error = tabs_constants::kTabStripNotEditableError;
+    return false;
+#else
 
   if (window_id && *window_id != ExtensionTabUtil::GetWindowIdOfTab(contents)) {
     WindowController* target_controller =
@@ -1870,6 +2016,7 @@ bool TabsMoveFunction::MoveTab(int tab_id,
   *new_index += 1;
 
   return true;
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsReloadFunction::Run() {
@@ -1954,11 +2101,13 @@ bool TabsRemoveFunction::RemoveTab(int tab_id, std::string* error) {
     return false;
   }
 
+#if !BUILDFLAG(IS_ANDROID)
   // Don't let the extension remove a tab if the user is dragging tabs around.
   if (!browser->window()->IsTabStripEditable()) {
     *error = tabs_constants::kTabStripNotEditableError;
     return false;
   }
+#endif
 
   // Get last committed or pending URL.
   std::string current_url = contents->GetVisibleURL().is_valid()
@@ -2026,7 +2175,9 @@ ExtensionFunction::ResponseAction TabsGroupFunction::Run() {
   std::optional<tabs::Group::Params> params =
       tabs::Group::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(params);
-
+#if BUILDFLAG(IS_ANDROID)
+  return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
+#else
   std::string error;
 
   // Get the target browser from the parameters.
@@ -2139,6 +2290,7 @@ ExtensionFunction::ResponseAction TabsGroupFunction::Run() {
   DCHECK_GT(group_id, 0);
 
   return RespondNow(WithArguments(group_id));
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsUngroupFunction::Run() {
@@ -2507,6 +2659,7 @@ ExecuteCodeFunction::InitResult ExecuteCodeInTabFunction::Init() {
   // If the tab ID wasn't given then it needs to be converted to the
   // currently active tab's ID.
   if (tab_id == -1) {
+#if !BUILDFLAG(IS_ANDROID)
     if (WindowController* window_controller =
             chrome_details_.GetCurrentWindowController()) {
       content::WebContents* web_contents = window_controller->GetActiveTab();
@@ -2520,6 +2673,12 @@ ExecuteCodeFunction::InitResult ExecuteCodeInTabFunction::Init() {
       // Can happen during shutdown.
       return set_init_result_error(tabs_constants::kNoCurrentWindowError);
     }
+#else
+    tab_id = GetSelectedTabIdAndroid();
+    if (tab_id == -1) {
+      return set_init_result_error(tabs_constants::kNoCurrentWindowError);
+    }
+#endif
   }
 
   execute_tab_id_ = tab_id;
@@ -2605,7 +2764,11 @@ ScriptExecutor* ExecuteCodeInTabFunction::GetScriptExecutor(
   bool success = GetTabById(execute_tab_id_, browser_context(),
                             include_incognito_information(), &browser, nullptr,
                             &contents, nullptr, error) &&
+#if !BUILDFLAG(IS_ANDROID)
                  contents && browser;
+#else
+                  contents;
+#endif
 
   if (!success)
     return nullptr;
