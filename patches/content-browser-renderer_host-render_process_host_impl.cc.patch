diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc
index 9e5567aec56dc43ca39356fdebc05df4b9958b50..8d193a0fbec8d5591b27ee46307c5199dd707194 100644
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -218,7 +218,9 @@
 #include "content/browser/web_database/web_database_host_impl.h"
 #include "media/audio/android/audio_manager_android.h"
 #include "third_party/blink/public/mojom/android_font_lookup/android_font_lookup.mojom.h"
+#include "mises/browser/android/preferences/features.h"
 #endif
+#include "mises/components/ungoogled/ungoogled_switches.h"
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
 #include <sys/resource.h>
@@ -965,6 +967,26 @@ class UnmatchedServiceWorkerProcessTracker
     return tracker->TakeFreshestProcessForSite(site_instance);
   }
 
+  static bool IsHighPriority(RenderProcessHost* host) {
+    BrowserContext* browser_context = host->GetBrowserContext();
+    UnmatchedServiceWorkerProcessTracker* tracker =
+        static_cast<UnmatchedServiceWorkerProcessTracker*>(
+            browser_context->GetUserData(
+                kUnmatchedServiceWorkerProcessTrackerKey));
+    if (!tracker)
+      return false;
+    
+    auto found = tracker->FindProcess(host);
+    if (found) {
+#if BUILDFLAG(IS_ANDROID)
+      const GURL& url = found->first.site_url();
+      std::vector<std::string> priority_extensions = preferences::features::GetMisesPriorityExtensionIds();
+      return url.has_host() && base::Contains(priority_extensions, url.host());
+#endif
+    }
+    return false;
+  }
+
   UnmatchedServiceWorkerProcessTracker() = default;
 
   ~UnmatchedServiceWorkerProcessTracker() override {
@@ -1056,6 +1078,15 @@ class UnmatchedServiceWorkerProcessTracker
     return false;
   }
 
+  std::optional<SiteProcessIDPair> FindProcess(RenderProcessHost* host) const {
+    int process_id = host->GetID();
+    for (const auto& site_process_id : site_process_set_) {
+      if (site_process_id.second == process_id)
+        return site_process_id;
+    }
+    return std::nullopt;
+  }
+
   // Use std::set because duplicates don't need to be tracked separately (eg.,
   // service workers for the same site in the same process). It is sorted in the
   // order of insertion.
@@ -3370,6 +3401,15 @@ void RenderProcessHostImpl::PropagateBrowserCommandLineToRenderer(
     switches::kEnableWebGLImageChromium,
     switches::kEnableWebGPUDeveloperFeatures,
     switches::kFileUrlPathAlias,
+    switches::kFingerprintingClientRectsNoise,
+    switches::kFingerprintingCanvasMeasureTextNoise,
+    switches::kFingerprintingCanvasImageDataNoise,
+    switches::kFingerprint,
+    switches::kFingerprintPlatform,
+    switches::kFingerprintPlatformVersion,
+    switches::kFingerprintBrand,
+    switches::kFingerprintBrandVersion,
+    switches::kFingerprintHardwareConcurrency,
     switches::kForceDeviceScaleFactor,
     switches::kForceDisplayColorProfile,
     switches::kForceGpuMemAvailableMb,
@@ -5214,6 +5254,15 @@ void RenderProcessHostImpl::UpdateProcessPriority() {
 #endif
   );
 
+  if (UnmatchedServiceWorkerProcessTracker::IsHighPriority(this)) {
+    if (frame_depth_ == kMaxFrameDepthForPriority) {
+      priority.visible = true;
+      priority.frame_depth = 1;
+      priority.intersects_viewport = true;
+    }
+    
+  }
+
   if (priority_ == priority) {
     return;
   }
@@ -5226,6 +5275,8 @@ void RenderProcessHostImpl::UpdateProcessPriority() {
               ChromeTrackEvent::kChildProcessLauncherPriority, priority);
   priority_ = priority;
 
+  //LOG(INFO) << "UpdateProcessPriority:" << (int)priority.GetProcessPriority() << "(" <<priority.visible <<", " <<priority.has_media_stream <<", "<<priority.has_foreground_service_worker <<  ", " <<priority.frame_depth <<  ", "<< ", " <<priority.intersects_viewport <<  ", "<< priority.boost_for_pending_views <<  ", "<< priority.boost_for_loading <<  ", "<< (int)priority.importance << ")" <<" For Host ID " << GetID();
+
   // Control the background state from the browser process, otherwise the task
   // telling the renderer to "unbackground" itself may be preempted by other
   // tasks executing at lowered priority ahead of it or simply by not being
